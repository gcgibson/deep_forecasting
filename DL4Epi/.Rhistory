##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
##   foreach week in season s, make forecast and save
for(sw in 1:52){
## make data to forecast from
last_col_idx <- which(training_data$colData$season.week==sw & training_data$colData$season==eval_season)
tmp_timezero <- list(
year = training_data$colData$year[last_col_idx],
epiweek = training_data$colData$week[last_col_idx]
)
tmp_forecast_data <- training_data$subset(cols = first_col_idx:last_col_idx, mutate = FALSE)
## make forecast
tmp_forecast <- this_model$forecast(tmp_forecast_data, steps=STEPS)
## create, rbind tidy forecast data
tmp_fcast_data <- gather_forecast(tmp_forecast, tmp_timezero)
if(exists("fcast_data")) {
fcast_data <- bind_rows(fcast_data, tmp_fcast_data)
} else {
fcast_data <- tmp_fcast_data
}
}
}
## subset data up to (not inclusive) week one of season s
first_fitting_week <- list(season=first_season_for_fitting, season.week=1)
last_fitting_week <- list(season=last_season, season.week=52)
first_col_idx <- which(training_data$colData$season.week==first_fitting_week$season.week & training_data$colData$season==first_fitting_week$season)
last_col_idx <- which(training_data$colData$season.week==last_fitting_week$season.week & training_data$colData$season==last_fitting_week$season)
once_training_data <- training_data$subset(cols = first_col_idx:last_col_idx, mutate = FALSE)
##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
once_training_data
##  fit model to data
this_model$fit(once_training_data)
source('~/deep_forecasting/DL4Epi/eval.R')
##  fit model to data
this_model$fit(once_training_data)
#source("models/sarimaTD-model.R")
source("main.R")
THIS_MODEL_FITS_ONCE <- TRUE
MODEL_ABBR <- "DL4EPI"
STEPS <- 6
### load training data
training_data <- readRDS("training_data.rds")
first_season_for_fitting <- "2010/2011"
eval_season <- "2015/2016"
last_season <- "2014/2015"
### training evaluation for once-fit model
if(THIS_MODEL_FITS_ONCE){
## subset data up to (not inclusive) week one of season s
first_fitting_week <- list(season=first_season_for_fitting, season.week=1)
last_fitting_week <- list(season=last_season, season.week=52)
first_col_idx <- which(training_data$colData$season.week==first_fitting_week$season.week & training_data$colData$season==first_fitting_week$season)
last_col_idx <- which(training_data$colData$season.week==last_fitting_week$season.week & training_data$colData$season==last_fitting_week$season)
once_training_data <- training_data$subset(cols = first_col_idx:last_col_idx, mutate = FALSE)
##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
##   foreach week in season s, make forecast and save
for(sw in 1:52){
## make data to forecast from
last_col_idx <- which(training_data$colData$season.week==sw & training_data$colData$season==eval_season)
tmp_timezero <- list(
year = training_data$colData$year[last_col_idx],
epiweek = training_data$colData$week[last_col_idx]
)
tmp_forecast_data <- training_data$subset(cols = first_col_idx:last_col_idx, mutate = FALSE)
## make forecast
tmp_forecast <- this_model$forecast(tmp_forecast_data, steps=STEPS)
## create, rbind tidy forecast data
tmp_fcast_data <- gather_forecast(tmp_forecast, tmp_timezero)
if(exists("fcast_data")) {
fcast_data <- bind_rows(fcast_data, tmp_fcast_data)
} else {
fcast_data <- tmp_fcast_data
}
}
}
if(!THIS_MODEL_FITS_ONCE){
### training process for each-fit model
## foreach season s in training seasons
##   foreach week in season s
##      fit model to data up to (not inclusive) week 1 of training season s
##      make forecast
##      rbind tidy forecast data
}
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
##  fit model to data
this_model$fit(once_training_data)
#source("models/sarimaTD-model.R")
source("main.R")
##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
library(ForecastFramework)
library(dplyr)
source("code/forecast-utils.R") ## helper functions for tidying forecast data
## source model code
source("ContestModel.R")
#source("models/sarimaTD-model.R")
source("main.R")
THIS_MODEL_FITS_ONCE <- TRUE
MODEL_ABBR <- "DL4EPI"
STEPS <- 6
### load training data
training_data <- readRDS("training_data.rds")
first_season_for_fitting <- "2010/2011"
eval_season <- "2015/2016"
last_season <- "2014/2015"
### training evaluation for once-fit model
if(THIS_MODEL_FITS_ONCE){
## subset data up to (not inclusive) week one of season s
first_fitting_week <- list(season=first_season_for_fitting, season.week=1)
last_fitting_week <- list(season=last_season, season.week=52)
first_col_idx <- which(training_data$colData$season.week==first_fitting_week$season.week & training_data$colData$season==first_fitting_week$season)
last_col_idx <- which(training_data$colData$season.week==last_fitting_week$season.week & training_data$colData$season==last_fitting_week$season)
once_training_data <- training_data$subset(cols = first_col_idx:last_col_idx, mutate = FALSE)
##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
##   foreach week in season s, make forecast and save
for(sw in 1:52){
## make data to forecast from
last_col_idx <- which(training_data$colData$season.week==sw & training_data$colData$season==eval_season)
tmp_timezero <- list(
year = training_data$colData$year[last_col_idx],
epiweek = training_data$colData$week[last_col_idx]
)
tmp_forecast_data <- training_data$subset(cols = first_col_idx:last_col_idx, mutate = FALSE)
## make forecast
tmp_forecast <- this_model$forecast(tmp_forecast_data, steps=STEPS)
## create, rbind tidy forecast data
tmp_fcast_data <- gather_forecast(tmp_forecast, tmp_timezero)
if(exists("fcast_data")) {
fcast_data <- bind_rows(fcast_data, tmp_fcast_data)
} else {
fcast_data <- tmp_fcast_data
}
}
}
## subset data up to (not inclusive) week one of season s
first_fitting_week <- list(season=first_season_for_fitting, season.week=1)
last_fitting_week <- list(season=last_season, season.week=52)
first_col_idx <- which(training_data$colData$season.week==first_fitting_week$season.week & training_data$colData$season==first_fitting_week$season)
last_col_idx <- which(training_data$colData$season.week==last_fitting_week$season.week & training_data$colData$season==last_fitting_week$season)
once_training_data <- training_data$subset(cols = first_col_idx:last_col_idx, mutate = FALSE)
##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
print (y_ts)
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/main.R')
#source("models/sarimaTD-model.R")
source("main.R")
##  fit model to data
this_model$fit(once_training_data)
##  fit model to data
this_model$fit(once_training_data)
library(ForecastFramework)
library(dplyr)
source("code/forecast-utils.R") ## helper functions for tidying forecast data
## source model code
source("ContestModel.R")
#source("models/sarimaTD-model.R")
source("main.R")
THIS_MODEL_FITS_ONCE <- TRUE
MODEL_ABBR <- "DL4EPI"
STEPS <- 6
### load training data
training_data <- readRDS("training_data.rds")
first_season_for_fitting <- "2010/2011"
eval_season <- "2015/2016"
last_season <- "2014/2015"
### training evaluation for once-fit model
if(THIS_MODEL_FITS_ONCE){
## subset data up to (not inclusive) week one of season s
first_fitting_week <- list(season=first_season_for_fitting, season.week=1)
last_fitting_week <- list(season=last_season, season.week=52)
first_col_idx <- which(training_data$colData$season.week==first_fitting_week$season.week & training_data$colData$season==first_fitting_week$season)
last_col_idx <- which(training_data$colData$season.week==last_fitting_week$season.week & training_data$colData$season==last_fitting_week$season)
once_training_data <- training_data$subset(cols = first_col_idx:last_col_idx, mutate = FALSE)
##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
##   foreach week in season s, make forecast and save
for(sw in 1:52){
## make data to forecast from
last_col_idx <- which(training_data$colData$season.week==sw & training_data$colData$season==eval_season)
tmp_timezero <- list(
year = training_data$colData$year[last_col_idx],
epiweek = training_data$colData$week[last_col_idx]
)
tmp_forecast_data <- training_data$subset(cols = first_col_idx:last_col_idx, mutate = FALSE)
## make forecast
tmp_forecast <- this_model$forecast(tmp_forecast_data, steps=STEPS)
## create, rbind tidy forecast data
tmp_fcast_data <- gather_forecast(tmp_forecast, tmp_timezero)
if(exists("fcast_data")) {
fcast_data <- bind_rows(fcast_data, tmp_fcast_data)
} else {
fcast_data <- tmp_fcast_data
}
}
}
##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
#source("models/sarimaTD-model.R")
source("main.R")
##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/main.R')
#source("models/sarimaTD-model.R")
source("main.R")
##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/main.R')
library(ForecastFramework)
library(dplyr)
source("code/forecast-utils.R") ## helper functions for tidying forecast data
## source model code
source("ContestModel.R")
#source("models/sarimaTD-model.R")
source("main.R")
THIS_MODEL_FITS_ONCE <- TRUE
MODEL_ABBR <- "DL4EPI"
STEPS <- 6
### load training data
training_data <- readRDS("training_data.rds")
first_season_for_fitting <- "2010/2011"
eval_season <- "2015/2016"
last_season <- "2014/2015"
##  initialize model
## TODO: need to make this line be automatically called
this_model <- DL4EPI$new()
##  fit model to data
this_model$fit(once_training_data)
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/eval.R')
##  fit model to data
this_model$fit(once_training_data)
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
library(tidyverse)
library(ForecastFramework)
#theme_set(theme_bw())
library(reticulate)
use_python("/Users/gcgibson/anaconda/bin/python2.7")
source_python("main.py")
source('~/deep_forecasting/DL4Epi/eval.R')
##  fit model to data
this_model$fit(once_training_data)
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
adjacency_matrix
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/eval.R')
##  fit model to data
this_model$fit(once_training_data)
tmp_forecast_data
## number of models (provinces) to forecast
nmodels <- length(private$.models)
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
sim_forecasts
private$output <- SimulatedIncidenceMatrix$new(sim_forecasts)
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
sim_forecasts
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
sim_forecasts
## make forecast
tmp_forecast <- this_model$forecast(tmp_forecast_data, steps=STEPS)
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
sim_forecasts
private$output <- SimulatedIncidenceMatrix$new(sim_forecasts)
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,window,NULL,NULL)
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
## make forecast
tmp_forecast <- this_model$forecast(tmp_forecast_data, steps=STEPS)
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,window,NULL,NULL)
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,window,NULL,NULL)
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
## make forecast
tmp_forecast <- this_model$forecast(tmp_forecast_data, steps=STEPS)
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,window,NULL,NULL)
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,window,NULL,NULL)
sim_forecasts
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,window,NULL,NULL)
private$output <- SimulatedIncidenceMatrix$new(sim_forecasts)
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,window,NULL,NULL)
sim_forecasts
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,steps,NULL,NULL)
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,steps,NULL,NULL)
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,steps,NULL,NULL)
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,steps,NULL,NULL)
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,steps)
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,12)
sim_forecasts
sim_forecasts <- matrix(NA,ncol=16)
for (step_ahead in 1:steps){
sim_forecasts <- rbind(sim_forecasts,test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,step_ahead))
}
source('~/deep_forecasting/DL4Epi/eval.R')
sim_forecasts <- matrix(NA,ncol=16)
for (step_ahead in 1:6){
sim_forecasts <- rbind(sim_forecasts,test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,step_ahead))
}
sim_forecasts
sim_forecasts <- sim_forecasts[2:nrow(sim_forecasts),]
private$output <- SimulatedIncidenceMatrix$new(sim_forecasts)
private$output <- SimulatedIncidenceMatrix$new(array(sim_forecasts,dim=c(1,6,1)))
SimulatedIncidenceMatrix$new(array(sim_forecasts,dim=c(1,6,1)))
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
?gather_forecast
library(ForecastFramework)
library(dplyr)
source("forecast-utils.R") ## helper functions for tidying forecast data
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/DL4Epi/main.R')
use_python("/Users/gcgibson/anaconda/bin/python2.7")
source('~/deep_forecasting/DL4Epi/eval.R')
source('~/deep_forecasting/DL4Epi/main.R')
source('~/deep_forecasting/DL4Epi/eval.R')
