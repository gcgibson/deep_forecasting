training_data <- readRDS("training_data.rds")
getwd()
training_data <- readRDS("../training_data.rds")
training_data <- readRDS("training_data.rds")
training_data <- readRDS("training_data.rds")
View(training_data)
install.packages("forecastFramework")
install.packages("forecastframework")
install.packages("ForecastFramework")
install.packages("Forecastframework")
install.packages("forecastframework")
devtools::install_github('HopkinsIDD/ForecastFramework')
#library(tidyverse)
library(ForecastFramework)
library(tidyverse)
training_data <- readRDS("training_data.rds")
View(training_data)
training_data <- readRDS("training_data.rds")
library(tidyverse)
library(ForecastFramework)
training_data <- readRDS("training_data.rds")
training_data <- readRDS("training_data.rds")
View(training_data)
training_data <- readRDS("training_data.rds")
training_data()
training_data$mat
View(training_data$mat)
plot(training_data$mat)
nrow(training_data)
nrow(training_data$mat)
plot(training_data$mat[1,])
#theme_set(theme_bw())
library(reticulate)
colnames(training_data$mat)
rownames(training_data$mat)
adjacency_matrix <- diag(120)
adjacency_matrix
adjacency_matrix <- diag(1,120)
adjacency_matrix
adjacency_matrix <- diag(rep(1,16))
adjacency_matrix
View(adjacency_matrix)
as.matrix(training_data)
as.matrix(training_data$mat)
cat(as.matrix(training_data$mat),file="training_data.txt",sep=",")
write.table(as.matrix(training_data$mat), file="training_data.txt", row.names=FALSE, col.names=FALSE)
write.table(as.matrix(training_data$mat), file="training_data.txt", row.names=FALSE, col.names=FALSE,sep=",")
write.table(as.matrix(training_data$mat), file="training_data.txt", row.names=FALSE, col.names=FALSE,sep=",")
write.table(as.matrix(training_data$mat), file="training_data.txt", row.names=FALSE, col.names=FALSE)
write.table(training_data$mat, file="training_data.txt", row.names=FALSE, col.names=FALSE)
write.table(training_data$mat, file="training_data.txt", row.names=FALSE, col.names=FALSE)
write.table(training_data$mat, file="training_data.txt", row.names=FALSE, col.names=FALSE,sep=",")
typeof(training_data$mat)
write.csv(training_data$mat,file="training_data.csv")
write.csv(training_data$mat,file="training_data.csv",row.names = F,col.names = F)
training_data$mat
tmp <- training_data$mat
View(tmp)
write.csv(tmp,file="training_data.csv",row.names = F,col.names = F)
write.csv(as.data.frame(tmp),file="training_data.csv",row.names = F,col.names = F)
write.csv(as.data.frame(tmp),file="training_data.csv",row.names = F,col.names = F)
write.csv(as.data.frame(tmp),file="training_data.csv",row.names = F,col.names = FALSE)
write.table(as.data.frame(tmp),file="training_data.csv",row.names = F,col.names = FALSE,sep=",")
tmp2 <-read.csv("training_data.csv")
View(tmp2)
dim(tmp2)
write.table(as.data.frame(tmp),file="training_data.txt",row.names = F,col.names = FALSE,sep=",")
tmp2 <-read.csv("training_data.txt")
dim(tmp2)
adjacency_matrix <- diag(rep(1,16))
write.table(as.data.frame(adjacency_matrix),file="adj.txt",row.names = F,col.names = FALSE,sep=",")
write.table(as.data.frame(tmp),file="training_data.txt",row.names = F,col.names = FALSE,sep=",",eol = "\n")
write.table(tmp,file="training_data.txt",row.names = F,col.names = FALSE,sep=",",eol = "\n")
View(tmp)
write.table(t(tmp),file="training_data.txt",row.names = F,col.names = FALSE,sep=",",eol = "\n")
library("mixtools")
library('ggplot2')
library("mclust")
library(readxl)
setwd("/Users/gcgibson/Downloads/")
ADcortex <- read_xlsx("ADcortex.xlsx")
ADcortex <- as.data.frame(ADcortex)
Ab42 <- read_xlsx("CSF_Ab42b.xlsx")
# GMM
model <- normalmixEM(x= Ab42$Ab42)
index.lower <- which.min(model$mu)
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower=122, upper= 1500)$root) # Replace with min and max for given variable
}
install.packages("geePack")
install.packages("geepack")
knitr::opts_chunk$set(echo = TRUE)
library(geepack)
leprosy = read_sas("/Users/gcgibson/Downloads/skin.sas7bdat")
library(haven)
leprosy = read_sas("/Users/gcgibson/Downloads/skin.sas7bdat")
leprosy
leprosy$Y
skin = read_sas("/Users/gcgibson/Downloads/skin.sas7bdat")
geeglm(Y ~ YEAR + TRT + YEAR:TRT,family = binomial(link="logit"),id=ID,scale.fix = T,corstr="exchangeable",data=skin )
skin$Y
geeglm(Y ~ YEAR + TRT + YEAR:TRT,family = binomial(link="log"),id=ID,scale.fix = T,corstr="exchangeable",data=skin )
geeglm(Y ~ YEAR + TRT + YEAR:TRT,family = poisson(link="log"),id=ID,scale.fix = T,corstr="exchangeable",data=skin )
gee_fit <- geeglm(Y ~ YEAR + TRT + YEAR:TRT,family = poisson(link="log"),id=ID,scale.fix = T,corstr="exchangeable",data=skin )
gee_fit$coefficients
summary(gee_fit)#$coefficients
summary(gee_fit)$coefficients
zcor <- genZcor(clusz = rep(4, 50), "unstr")
zcor <- genZcor(clusz = rep(4, 50), waves = skin$ID, "unstr")
zcor
gee_fit <- geeglm(Y ~ YEAR + TRT + YEAR:TRT + EXPSOURE,family = poisson(link="log"),id=ID,scale.fix = T,corstr="userdefined",zcor=zcor,data=skin )
gee_fit <- geeglm(Y ~ YEAR + TRT + YEAR:TRT + EXPOSURE,family = poisson(link="log"),id=ID,scale.fix = T,corstr="userdefined",zcor=zcor,data=skin )
gee_fit <- geeglm(Y ~ YEAR + TRT + YEAR:TRT + EXPOSURE,family = poisson(link="log"),id=ID,scale.fix = T,corstr="ar1",data=skin )
summary(gee_fit)$coefficients
dim(zcor)
zcor
gee_fit <- geeglm(Y ~ YEAR + TRT + YEAR:TRT + EXPSOURE,family = poisson(link="log"),id=ID,scale.fix = T,corstr="exchangeable",data=skin )
summary(gee_fit)$coefficients
zcor <- genZcor(clusz = rep(4, 50), waves = skin$YEAR, "unstr")
zcor <- genZcor(clusz = table(skin$ID), waves = skin$YEAR, "unstr")
zcor.toep<-matrix(NA, nrow(zcor),3)
zcor.toep[,1]<-apply(zcor[,c(1,4,6)],1,sum)
zcor.toep[,2]<-apply(zcor[,c(2,5)],1,sum)
zcor.toep[,3]<-zcor[,3]
gee_fit <- geeglm(Y ~ YEAR + TRT + YEAR:TRT + EXPOSURE,family = poisson(link="log"),id=ID,scale.fix = T,corstr="userdefined",zcor=zcor,data=skin )
zcor <- genZcor(clusz = table(skin$ID), waves = skin$YEAR, "4")
zcor.toep<-matrix(NA, nrow(zcor),3)
zcor.toep[,1]<-apply(zcor[,c(1,4,6)],1,sum)
zcor.toep[,2]<-apply(zcor[,c(2,5)],1,sum)
zcor.toep[,3]<-zcor[,3]
gee_fit <- geeglm(Y ~ YEAR + TRT + YEAR:TRT + EXPOSURE,family = poisson(link="log"),id=ID,scale.fix = T,corstr="userdefined",zcor=zcor,data=skin )
zcor <- genZcor(clusz = table(skin$ID), waves = skin$YEAR,corstrv=4)
zcor.toep<-matrix(NA, nrow(zcor),3)
zcor.toep[,1]<-apply(zcor[,c(1,4,6)],1,sum)
zcor.toep[,2]<-apply(zcor[,c(2,5)],1,sum)
zcor.toep[,3]<-zcor[,3]
gee_fit <- geeglm(Y ~ YEAR + TRT + YEAR:TRT + EXPOSURE,family = poisson(link="log"),id=ID,scale.fix = T,corstr="userdefined",zcor=zcor,data=skin )
gee_fit <- geeglm(Y ~ YEAR + TRT + YEAR:TRT + EXPOSURE,family = poisson(link="log"),id=ID,scale.fix = T,corstr="userdefined",zcor=zcor.toep,data=skin )
library(pandoc)
library(pander)
pander(summary(gee_fit)$coefficients)
table(skin$ID)
#theme_set(theme_bw())
library(reticulate)
scipy <- import("scipy")
torch <- import("torch")
import("torch")
use_python("/Users/gcgibson/anaconda/bin/python")
import("torch")
#theme_set(theme_bw())
library(reticulate)
use_python("/Users/gcgibson/anaconda/bin/python")
sys$version
use_python("/Users/gcgibson/anaconda/bin/python")
import("torch")
conda_create("r-reticulate")
conda_install("r-reticulate", "torch")
conda_install("pytorch")
conda_install("numpy")
conda_create("r-reticulate")
use_condaenv("r-reticulate")
conda_install("numpy")
torch      = import("torch")
use_python("/Users/gcgibson/anaconda/bin/python")
torch      = import("torch")
use_python("/Users/gcgibson/anaconda/bin/python")
torch      = import("torch")
torch      = import("torch")
torch      = import("torch")
import("torch")
library(reticulate)
import("torch")
torch      = import("torch")
#theme_set(theme_bw())
library(reticulate)
torch      = import("torch")
system('python main.py --normalize 1 --epochs 2000 --data ./training_data.txt --sim_mat GER_states_adjacency.txt --model CNNRNN_Res --dropout 0.5 --ratio 0.01 --residual_window 4 --save_dir save --save_name cnnrnn_res.hhs.w-16.h-1.ratio.0.01.hw-4.pt --horizon 1 --window 16 --metric 0
')
#theme_set(theme_bw())
library(sys)
source("main.py")
source("main.py")
py_source("main.py")
source_python("main.py")
data <- "./training_data.txt"
adjacency_matrix <- "./GER_states_adjacency.txt"
epochs <- 100
valid_size <- .6
save_name <- "tmp"
model <- "CNNRNN_Res"
run(data,adjacency_matrix,epochs,train_size,valid_size,model,save_name)
train_size <- .6
valid_size <- .2
save_name <- "tmp"
model <- "CNNRNN_Res"
run(data,adjacency_matrix,epochs,train_size,valid_size,model,save_name)
?run
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
v
forecasts
View(forecasts)
View(forecasts)
typeof(forecasts)
c(forecasts)
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
trained_model_path
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
trained_model_path
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
trained_model_path
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
source('~/deep_forecasting/run.R')
trained_model_path
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model,save_name,NULL,NULL)
source('~/deep_forecasting/run.R')
test.data <- train_dl(data,adjacency_matrix,train_size,valid_size,model,save_name)
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model,save_name,NULL,NULL)
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model,save_name,NULL,NULL)
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
model_name <- "CNNRNN_Res"
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
source('~/deep_forecasting/run.R')
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
forecasts
dim(forecasts)
forecasts
View(forecasts)
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
py_to_r(forecasts)
View(py_to_r(forecasts))
source('~/deep_forecasting/run.R')
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
source('~/deep_forecasting/run.R')
library(tidyverse)
library(ForecastFramework)
#theme_set(theme_bw())
library(reticulate)
use_python("/Users/gcgibson/anaconda/bin/python2.7")
source_python("main.py")
data <- "./training_data.txt"
adjacency_matrix <- "./GER_states_adjacency.txt"
epochs <- 100
train_size <- 0.6
valid_size <- 0.2
save_name <- "tmp"
model_name <- "CNNRNN_Res"
test.data <- train_dl(data,adjacency_matrix,train_size,valid_size,model_name,save_name)
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
test.data <- train_dl(data,adjacency_matrix,train_size,valid_size,model_name,save_name)
library(tidyverse)
library(ForecastFramework)
#theme_set(theme_bw())
library(reticulate)
use_python("/Users/gcgibson/anaconda/bin/python2.7")
source_python("main.py")
data <- "./training_data.txt"
adjacency_matrix <- "./GER_states_adjacency.txt"
epochs <- 100
train_size <- 0.6
valid_size <- 0.2
save_name <- "tmp"
model_name <- "CNNRNN_Res"
test.data <- train_dl(data,adjacency_matrix,train_size,valid_size,model_name,save_name)
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
source('~/deep_forecasting/run.R')
forecasts <- test(data,adjacency_matrix,train_size,valid_size,model_name,save_name,NULL,NULL)
